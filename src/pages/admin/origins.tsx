import { type NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useMemo, useState } from "react";
import { trpc } from "../../utils/trpc";
import AddDonor from "../../components/donors/AddDonor";
import SortedTable from "../../components/tables/SortedTable";
import { Donor } from "@prisma/client";
import { Car } from "@prisma/client";

const Donors: NextPage = () => {
  const [showModal, setShowModal] = React.useState(false);
  const [headCells, setHeadCells] = useState<readonly string[]>([]);
  const [rows, setRows] = useState<Donor[]>([]);
  const donors = trpc.donors.getAllDashboard.useQuery();

  useMemo(() => {
    setHeadCells([]);
    setRows([]);
    if (!donors.data) return;
    const hideColumns = ["updatedAt", "Part", "car"];
    const nestedColumns = [{ car: ["series", "generation", "model"] }];
    setHeadCells((): any => {
      const cells = Object.keys(donors.data[0] as any)
        .filter((key) => {
          if (hideColumns.includes(key)) return false;
          if (nestedColumns[key]) return false;
          return true;
        })
        .map((key: any) => {
          return {
            disablePadding: false,
            id: key,
            numeric: false,
            label: key,
          };
        });
      nestedColumns.forEach((nestedColumn) => {
        Object.values(nestedColumn).forEach((nestedColumnValue) => {
          nestedColumnValue.forEach((nestedColumnValueValue) => {
            cells.splice(cells.indexOf("year") - 1, 0, {
              disablePadding: false,
              id: nestedColumnValueValue,
              numeric: false,
              label: nestedColumnValueValue,
            });
          });
        });
      });
      return cells;
    });
    const newRows = donors.data?.map((donor) => {
      return {
        vin: donor.vin,
        year: donor.year,
        cost: donor.cost,
        createdAt: new Date(donor.createdAt).toLocaleDateString(),
        series: donor.car.series,
        generation: donor.car.generation,
        model: donor.car.model,
        totalUnsoldParts: donor.Part.reduce((acc, part) => {
          if (part.listing === null || part.listing.sold) return acc;
          return acc + part?.listing?.price + acc;
        }, 0),
        totalSoldParts: donor.Part.reduce((acc, part) => {
          if (part.listing === null || !part.listing.sold) return acc;
          return acc + part?.listing?.price + acc;
        }, 0),
        totalListedParts: donor.Part.reduce((acc, part) => {
          if (part.listing === null) return acc;
          return acc + part?.listing?.price + acc;
        }, 0),
      };
    });
    setRows(newRows);
  }, [donors.data]);

  useEffect(() => {
    console.log(rows);
  }, [rows]);

  return (
    <>
      <Head>
        <title>Donors</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-white">
        {showModal ? (
          <AddDonor showModal={showModal} setShowModal={setShowModal} />
        ) : null}
        <div>
          <button onClick={() => setShowModal(!showModal)}>Add Donor</button>
        </div>
        <SortedTable
          headCells={headCells}
          rows={rows}
          title={"Donors"}
          rowId={"vin"}
        />
      </main>
    </>
  );
};

export default Donors;
