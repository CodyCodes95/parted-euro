import { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useMemo } from "react";
import { trpc } from "../../../utils/trpc";
import { Input } from "@material-tailwind/react";
import PhotoCamera from "@mui/icons-material/PhotoCamera";
import IconButton from "@mui/material/IconButton";
import Select from "react-select";

interface Options {
  label: string;
  value: string;
}

interface NestedOptions {
  label: string;
  options: Array<Options>;
}

interface ICar {
  id: string;
  make: string;
  series: string;
  generation: string;
  model: string;
}

interface IDonor {
  vin: string;
  car: ICar;
  year: number;
  cost: number;
}

interface IPart {
  id: string;
  partNo: string;
  name: string;
  donorVin: string;
  listingId: string;
  createdAt: string;
  updatedAt: string;
  cars: any;
  donor: IDonor;
  listing: any;
}

const AddListing: NextPage = () => {
  const [title, setTitle] = React.useState<string>("");
  const [description, setDescription] = React.useState<string>("");
  const [condition, setCondition] = React.useState<string>("");
  const [price, setPrice] = React.useState<number>(0);
  const [weight, setWeight] = React.useState<number>(0);
  const [length, setLength] = React.useState<number>(0);
  const [width, setWidth] = React.useState<number>(0);
  const [height, setHeight] = React.useState<number>(0);
  const [images, setImages] = React.useState<Array<string>>([]);
  const [parts, setParts] = React.useState<Array<string>>([]);
  const [partOptions, setPartOptions] = React.useState<any>([]);

  const cars = trpc.cars.getAll.useQuery();
  const allParts = trpc.parts.getAll.useQuery();
  const saveListing = trpc.listings.createListing.useMutation();
  const uploadImage = trpc.listings.uploadListingImage.useMutation();
  const associateListingToPart = trpc.parts.updateListingOnPart.useMutation();
  const saveImageRelation = trpc.images.createImageRelation.useMutation();

  useMemo(() => {
    setPartOptions([]);
    allParts.data?.forEach((part: any) => {
      setPartOptions((prevState: Array<NestedOptions>) => {
        if (
          prevState.some(
            (group: NestedOptions) => group.label === part.donor.vin
          )
        ) {
          return prevState.map((group: NestedOptions) => {
            if (group.label === part.donor.vin) {
              group.options.push({
                label: part.partNo,
                value: part.id,
              });
            }
            return group;
          });
        } else {
          return [
            ...prevState,
            {
              label: part.donor.vin,
              options: [
                {
                  label: part.partNo,
                  value: part.id,
                },
              ],
            },
          ];
        }
      });
    });
  }, [allParts.data]);

  const handleImageAttach = (e: any) => {
    Array.from(e.target.files).forEach((file: any) => {
      const reader = new FileReader();
      reader.onload = (onLoadEvent: any) => {
        setImages((imageState: any) => [
          ...imageState,
          onLoadEvent.target.result,
        ]);
      };
      reader.readAsDataURL(file);
    });
  };

  const onSave = async () => {
    const result = await saveListing.mutateAsync({
      title: title,
      description: description,
      condition: condition,
      price: price * 100,
      weight: weight * 1000,
      length: length * 10,
      width: width * 10,
      height: height * 10,
    });
    const listingId = result.id;
    const imagePromises = images.map(async (image: string) => {
      const imageRes = await uploadImage.mutateAsync({
        image: image,
      });
      return saveImageRelation.mutateAsync({
        listingId: listingId,
        url: imageRes.url,
      });
    });
    const partPromises = parts.map((partId: string) => {
      return associateListingToPart.mutateAsync({
        listingId: listingId,
        partId: partId,
      });
    });
    await Promise.all([...imagePromises, ...partPromises]);
    console.log("finished");
    setTitle("");
    setDescription("");
    setCondition("");
    setPrice(0);
    setWeight(0);
    setLength(0);
    setWidth(0);
    setHeight(0);
    setImages([]);
  };

  return (
    <>
      <Head>
        <title>Create Listing</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h- flex flex-col items-center justify-center bg-white">
        <div className="space-y-6 p-6">
          <div className="w-72">
            <Input
              value={title}
              label="Title"
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>
          <div className="w-72">
            <Input
              value={description}
              label="Description"
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div className="w-72">
            <Input
              value={condition}
              label="Condition"
              onChange={(e) => setCondition(e.target.value)}
            />
          </div>
          <div className="w-72">
            <Input
              value={price || undefined}
              type="number"
              label="Price"
              onChange={(e) => setPrice(Number(e.target.value))}
            />
          </div>
          <div className="w-72">
            <Input
              value={weight || undefined}
              type="number"
              label="Weight"
              onChange={(e) => setWeight(Number(e.target.value))}
            />
          </div>
          <div className="w-72">
            <Input
              value={length || undefined}
              type="number"
              label="Length"
              onChange={(e) => setLength(Number(e.target.value))}
            />
          </div>
          <div className="w-72">
            <Input
              value={width || undefined}
              type="number"
              label="Width"
              onChange={(e) => setWidth(Number(e.target.value))}
            />
          </div>
          <div className="w-72">
            <Input
              value={height || undefined}
              type="number"
              label="Height"
              onChange={(e) => setHeight(Number(e.target.value))}
            />
          </div>
          <div className="mb-6">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Parts
            </label>
            <Select
              onChange={(e: any) => {
                setParts(e.map((part: Options) => part.value));
              }}
              isMulti
              options={partOptions}
              className="basic-multi-select"
              classNamePrefix="select"
              closeMenuOnSelect={false}
            />
          </div>
          <div className="flex items-center justify-between">
            <IconButton
              color="primary"
              aria-label="upload picture"
              component="label"
            >
              <input
                hidden
                accept="image/*"
                type="file"
                multiple={true}
                onChange={handleImageAttach}
              />
              <PhotoCamera />
            </IconButton>
            <p>{images.length} Photos attached</p>
          </div>
          <button onClick={onSave}>Create</button>
        </div>
      </main>
    </>
  );
};

export default AddListing;
