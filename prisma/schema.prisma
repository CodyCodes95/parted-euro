// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id         String       @id @default(cuid())
  make       String
  series     String
  generation String
  model      String
  body       String?
  Donor      Donor[]
  parts      PartDetail[]
}

model Donor {
  vin       String   @id @unique
  cost      Float
  car       Car      @relation(fields: [carId], references: [id])
  year      Int
  mileage   Int
  carId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parts     Part[]
  imageUrl  String?
  images    Image[]
}

model Listing {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  condition    String
  price        Float
  parts        Part[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  images       Image[]
  active       Boolean  @default(true)
  listedOnEbay Boolean  @default(false)
  // quantity will simply be the amount of non unique parts in the same listing
}

model Part {
  id                  String              @id @default(cuid())
  partDetails         PartDetail          @relation(fields: [partDetailsId], references: [partNo])
  partDetailsId       String
  inventoryLocation   InventoryLocations? @relation(fields: [inventoryLocationId], references: [id])
  listing             Listing[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  donorVin            String
  donor               Donor               @relation(fields: [donorVin], references: [vin])
  sold                Boolean             @default(false)
  soldPrice           Int?
  soldParentPrice     Int?
  inventoryLocationId String?
  Order               Order?              @relation(fields: [orderId], references: [id])
  orderId             String?
  variant             String?
}

model PartDetail {
  partNo    String      @id @unique
  name      String
  weight    Float 
  length    Float 
  width     Float 
  height    Float 
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cars      Car[]
  parts     Part[]
  partTypes PartTypes[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Donor     Donor?   @relation(fields: [donorVin], references: [vin])
  donorVin  String?
  order     Int
}

model XeroCreds {
  id           String   @id @default(cuid())
  refreshToken String
  tokenSet     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EbayCreds {
  id           String   @id @default(cuid())
  refreshToken Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InventoryLocations {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parts     Part[]
}

model Order {
  id              String   @id @default(cuid())
  items           Part[]
  shipping        Float
  shippingMethod  String
  subtotal        Float
  email           String
  name            String
  shippingAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PartTypes {
  id             String                  @id @default(cuid())
  name           String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  parts          PartDetail[]
  parentCategory PartTypeParentCategory? @relation(fields: [parentId], references: [id])
  parentId       String?
}

model PartTypeParentCategory {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  partsType PartTypes[]
}
